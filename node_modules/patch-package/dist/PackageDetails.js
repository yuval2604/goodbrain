"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
function parseNameAndVersion(s) {
    var parts = s.split("+");
    switch (parts.length) {
        case 1: {
            return { name: parts[0] };
        }
        case 2: {
            var nameOrScope = parts[0], versionOrName = parts[1];
            if (versionOrName.match(/^\d+/)) {
                return {
                    name: nameOrScope,
                    version: versionOrName,
                };
            }
            return { name: nameOrScope + "/" + versionOrName };
        }
        case 3: {
            var scope = parts[0], name = parts[1], version = parts[2];
            return { name: scope + "/" + name, version: version };
        }
    }
    return null;
}
function getPackageDetailsFromPatchFilename(patchFilename) {
    var legacyMatch = patchFilename.match(/^([^+=]+?)(:|\+)(\d+\.\d+\.\d+.*)\.patch$/);
    if (legacyMatch) {
        var name = legacyMatch[1];
        var version = legacyMatch[3];
        return {
            packageNames: [name],
            pathSpecifier: name,
            humanReadablePathSpecifier: name,
            path: path_1.join("node_modules", name),
            name: name,
            version: version,
            isNested: false,
            patchFilename: patchFilename,
        };
    }
    var parts = patchFilename
        .replace(/\.patch$/, "")
        .split("++")
        .map(parseNameAndVersion)
        .filter(function (x) { return x !== null; });
    if (parts.length === 0) {
        return null;
    }
    var lastPart = parts[parts.length - 1];
    if (!lastPart.version) {
        return null;
    }
    return {
        name: lastPart.name,
        version: lastPart.version,
        path: path_1.join("node_modules", parts.map(function (_a) {
            var name = _a.name;
            return name;
        }).join("/node_modules/")),
        patchFilename: patchFilename,
        pathSpecifier: parts.map(function (_a) {
            var name = _a.name;
            return name;
        }).join("/"),
        humanReadablePathSpecifier: parts.map(function (_a) {
            var name = _a.name;
            return name;
        }).join(" => "),
        isNested: parts.length > 1,
        packageNames: parts.map(function (_a) {
            var name = _a.name;
            return name;
        }),
    };
}
exports.getPackageDetailsFromPatchFilename = getPackageDetailsFromPatchFilename;
function getPatchDetailsFromCliString(specifier) {
    var parts = specifier.split("/");
    var packageNames = [];
    var scope = null;
    for (var i = 0; i < parts.length; i++) {
        if (parts[i].startsWith("@")) {
            if (scope) {
                return null;
            }
            scope = parts[i];
        }
        else {
            if (scope) {
                packageNames.push(scope + "/" + parts[i]);
                scope = null;
            }
            else {
                packageNames.push(parts[i]);
            }
        }
    }
    var path = path_1.join("node_modules", packageNames.join("/node_modules/"));
    return {
        packageNames: packageNames,
        path: path,
        name: packageNames[packageNames.length - 1],
        humanReadablePathSpecifier: packageNames.join(" => "),
        isNested: packageNames.length > 1,
        pathSpecifier: specifier,
    };
}
exports.getPatchDetailsFromCliString = getPatchDetailsFromCliString;
//# sourceMappingURL=data:application/json;base64,